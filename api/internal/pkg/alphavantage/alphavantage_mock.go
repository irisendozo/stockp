// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/alphavantage/alphavantage.go

// Package alphavantage is a generated GoMock package.
package alphavantage

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCaller is a mock of Caller interface
type MockCaller struct {
	ctrl     *gomock.Controller
	recorder *MockCallerMockRecorder
}

// MockCallerMockRecorder is the mock recorder for MockCaller
type MockCallerMockRecorder struct {
	mock *MockCaller
}

// NewMockCaller creates a new mock instance
func NewMockCaller(ctrl *gomock.Controller) *MockCaller {
	mock := &MockCaller{ctrl: ctrl}
	mock.recorder = &MockCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCaller) EXPECT() *MockCallerMockRecorder {
	return m.recorder
}

// GetLatestPriceForStock mocks base method
func (m *MockCaller) GetLatestPriceForStock(symbol string) (*LatestStockPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestPriceForStock", symbol)
	ret0, _ := ret[0].(*LatestStockPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestPriceForStock indicates an expected call of GetLatestPriceForStock
func (mr *MockCallerMockRecorder) GetLatestPriceForStock(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestPriceForStock", reflect.TypeOf((*MockCaller)(nil).GetLatestPriceForStock), symbol)
}

// GetStockInformation mocks base method
func (m *MockCaller) GetStockInformation(symbol string) (*SearchStockAPIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockInformation", symbol)
	ret0, _ := ret[0].(*SearchStockAPIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockInformation indicates an expected call of GetStockInformation
func (mr *MockCallerMockRecorder) GetStockInformation(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockInformation", reflect.TypeOf((*MockCaller)(nil).GetStockInformation), symbol)
}
